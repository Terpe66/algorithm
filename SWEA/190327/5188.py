import sys
sys.stdin = open("5188.txt")

for t in range(int(input())):
    # size : 가로 세로 길이
    size = int(input())
    # board : size x size 숫자가 들어 있는 판
    board = [list(map(int, input().split())) for _ in range(size)]
    # tmp : board와 같은 크기의 판, 각 칸마다 큰 숫자가 들어가 있다!
    # N(size)의 범위가 3 ~ 13, 최대 13 x 13에 10 이하의 자연수라서 대충 10000을 넣은 상태
    tmp = [[10000] * size for _ in range(size)]
    # tmp의 시작 지점을 board의 시작 지점과 같은 값으로 변경
    tmp[0][0] = board[0][0]

    # 진행 방법
    # 한 행의 모든 열을 탐색하면서 위가 있다면 위, 왼쪽이 있다면 왼쪽을 더하고 현재 값과 비교해서 더 작은 값을 칸에 넣어두면서 진행
    # 1) 시작 지점은 위와 왼쪽이 없기 때문에 바로 오른쪽인 (0, 1)번째 칸을 탐색
    # 2) board의 현재 칸(0, 1)의 값과 tmp에 저장된 위, 혹은 왼쪽의 값을 더한다
    # 3) 위와 더한 값, 왼쪽과 더한 값을 tmp의 현재 칸(0, 1)의 값과 비교해 더 작은 값을 tmp의 현재 칸에 저장한다

    # 예시 2번의 board 형태와 예시 2번의 tmp의 초기 형태
    # 2 4 1 3                   2 10000 10000 10000
    # 1 1 7 1               10000 10000 10000 10000
    # 9 1 7 10              10000 10000 10000 10000
    # 5 7 2 4               10000 10000 10000 10000

    # 2)의 현재 칸(board[0][1])의 값은 4, 왼쪽 칸(tmp[0][0])의 값은 2로 합하면 6
    # 3) 2)에서 합한 6과 tmp의 현재 칸(tmp[0][1])의 값(10000)을 비교해 더 작은 값을 tmp의 현재 칸에 저장한다
    # tmp[0][1]의 값이 6으로 변경되고 이런 식으로 값을 누적해나간다

    # 첫 번째 열 + 두 번째 열의 첫 번째 행의 작업이 끝난 상태
    # 2 4 1 3                   2     6     7    10
    # 1 1 7 1                   3 10000 10000 10000
    # 9 1 7 10              10000 10000 10000 10000
    # 5 7 2 4               10000 10000 10000 10000

    # 현재 칸이 (1, 1)일 때
    # 2) 위쪽 탐색 : board[1][1]의 값인 1과 tmp[0][1](board[0][0]에서 board[0][1]로 이동하면서 누적된 값)의 값인 6을 더한다 7
    # 3) tmp의 현재 칸(1, 1)을 비교해서 작은 값을 tmp[1][1]에 저장한다(7과 10000을 비교)
    # 2) 왼쪽 탐색 : board[1][1]의 값인 1과 tmp[1][0]의 값인 3을 더한다 4
    # 3) tmp의 현재 칸(1, 1)을 비교해서 작은 값을 tmp[1][1]에 저장한다(7과 4를 비교)

    # 두 번째 열의 작업이 끝난 상태
    # 2 4 1 3                   2     6     7    10
    # 1 1 7 1                   3     4    11    11
    # 9 1 7 10              10000 10000 10000 10000
    # 5 7 2 4               10000 10000 10000 10000

    # 모든 작업이 끝난 상태
    # 2 4 1 3                2  6  7 10
    # 1 1 7 1                3  4 11 11
    # 9 1 7 10              12  5 12 21
    # 5 7 2 4               17 12 14 18

    for i in range(size):
        for j in range(size):
            if i > 0:
                tmp[i][j] = min(tmp[i][j], board[i][j] + tmp[i - 1][j])
            if j > 0:
                tmp[i][j] = min(tmp[i][j], board[i][j] + tmp[i][j - 1])

    print(f"#{t + 1} {tmp[size - 1][size - 1]}")